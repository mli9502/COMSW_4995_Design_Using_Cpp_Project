diff --git a/utils/CMakeLists.txt b/utils/CMakeLists.txt
index 3d24b06..f6b93f1 100644
--- a/utils/CMakeLists.txt
+++ b/utils/CMakeLists.txt
@@ -4,4 +4,4 @@ project(utils LANGUAGES CXX)
 
 set(CMAKE_CXX_STANDARD 20)
 
-add_library(utils STATIC log.cpp exception.cpp)
\ No newline at end of file
+add_library(utils STATIC log.cpp exception.cpp memtable.cpp key.cpp value.cpp db_concepts.cpp serializer.cpp serializer.h)
\ No newline at end of file
diff --git a/utils/db_concepts.cpp b/utils/db_concepts.cpp
new file mode 100644
index 0000000..041b2fe
--- /dev/null
+++ b/utils/db_concepts.cpp
@@ -0,0 +1,5 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#include "db_concepts.h"
diff --git a/utils/db_concepts.h b/utils/db_concepts.h
new file mode 100644
index 0000000..dbfdc9c
--- /dev/null
+++ b/utils/db_concepts.h
@@ -0,0 +1,25 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#ifndef MAIN_DB_CONCEPTS_H
+#define MAIN_DB_CONCEPTS_H
+
+#include <iostream>
+#include <vector>
+
+using namespace std;
+
+template <typename T>
+concept Loggable = requires(ostream& os, T t) {
+    os << t;
+};
+
+template <typename T>
+concept Serializable = requires(T t) {
+    { t.toBlob() }
+    ->same_as<vector<char>>;
+    // TODO: @mli: Add fromBlob().
+};
+
+#endif  // MAIN_DB_CONCEPTS_H
diff --git a/utils/key.cpp b/utils/key.cpp
new file mode 100644
index 0000000..dde2276
--- /dev/null
+++ b/utils/key.cpp
@@ -0,0 +1,9 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#include "key.h"
+
+Key::Key(string key) : m_key(move(key)) {}
+
+string Key::key() const { return m_key; }
diff --git a/utils/key.h b/utils/key.h
new file mode 100644
index 0000000..ff970fd
--- /dev/null
+++ b/utils/key.h
@@ -0,0 +1,30 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#ifndef MAIN_KEY_H
+#define MAIN_KEY_H
+
+#include <string>
+
+using namespace std;
+
+class Key {
+   public:
+    // Ctor.
+    explicit Key(string key);
+    ~Key() = default;
+    // Copy ctor and move ctor.
+    Key(const Key& key) = default;
+    Key(Key&& key) = default;
+    // Copy assignment and move assignment.
+    Key& operator=(const Key& key) = default;
+    Key& operator=(Key&& key) = default;
+
+    [[nodiscard]] string key() const;
+
+   private:
+    string m_key;
+};
+
+#endif  // MAIN_KEY_H
diff --git a/utils/log.h b/utils/log.h
index 91b9cbe..de441b6 100644
--- a/utils/log.h
+++ b/utils/log.h
@@ -8,6 +8,7 @@
 #include <iostream>
 #include <sstream>
 
+#include "db_concepts.h"
 #include "exception.h"
 
 using namespace std;
@@ -16,11 +17,6 @@ namespace log {
 
 namespace impl {
 
-template <typename T>
-concept Loggable = requires(ostream& os, T t) {
-    os << t;
-};
-
 template <Loggable T>
 ostringstream& errorAndThrowImpl(ostringstream& oss, T&& arg) {
     oss << arg;
diff --git a/utils/memtable.cpp b/utils/memtable.cpp
new file mode 100644
index 0000000..ef9f5f8
--- /dev/null
+++ b/utils/memtable.cpp
@@ -0,0 +1,5 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#include "memtable.h"
diff --git a/utils/memtable.h b/utils/memtable.h
new file mode 100644
index 0000000..37e5715
--- /dev/null
+++ b/utils/memtable.h
@@ -0,0 +1,18 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#ifndef MAIN_MEMTABLE_H
+#define MAIN_MEMTABLE_H
+
+#include <map>
+#include <vector>
+
+using namespace std;
+
+class MemTable {
+   private:
+    map<KeyT>
+};
+
+#endif  // MAIN_MEMTABLE_H
diff --git a/utils/serializer.cpp b/utils/serializer.cpp
new file mode 100644
index 0000000..3d383c7
--- /dev/null
+++ b/utils/serializer.cpp
@@ -0,0 +1,14 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#include "serializer.h"
+
+#include "log.h"
+
+vector<char>&& Serializer::getBlob() && { return move(m_blob); }
+
+void Serializer::appendSize(int size) {
+    log::debug("Calling appendSize with size: ", size);
+    // TODO: @mli: Convert size to blob and append it to m_blob.
+}
\ No newline at end of file
diff --git a/utils/serializer.h b/utils/serializer.h
new file mode 100644
index 0000000..7479533
--- /dev/null
+++ b/utils/serializer.h
@@ -0,0 +1,37 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#ifndef MAIN_SERIALIZER_H
+#define MAIN_SERIALIZER_H
+
+#include <concepts>
+#include <vector>
+
+#include "db_concepts.h"
+
+using namespace std;
+
+// template <integral T>
+
+// https://stackoverflow.com/questions/51230764/serialization-deserialization-of-a-vector-of-integers-in-c
+
+class Serializer {
+   public:
+    template <Serializable T>
+    Serializer&& append(const T& obj) && {
+        const vector<char>& blob = obj.toBlob();
+        appendSize(blob.size());
+        m_blob.insert(m_blob.end(), blob.begin(), blob.end());
+        return move(*this);
+    }
+
+    vector<char>&& getBlob() &&;
+
+   private:
+    vector<char> m_blob;
+
+    void appendSize(int size);
+};
+
+#endif  // MAIN_SERIALIZER_H
diff --git a/utils/value.cpp b/utils/value.cpp
new file mode 100644
index 0000000..105446c
--- /dev/null
+++ b/utils/value.cpp
@@ -0,0 +1,18 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#include "value.h"
+
+#include "log.h"
+
+Value::Value() : m_type(Type::TOMBSTONE_VALUE) {}
+
+Value::Value(string value) : m_type(Type::STRING_VALUE), m_value(move(value)) {}
+
+string Value::value() const {
+    if (m_type == Type::TOMBSTONE_VALUE) {
+        log::errorAndThrow("Trying to access value for TOMBSTONE!");
+    }
+    return m_value;
+}
diff --git a/utils/value.h b/utils/value.h
new file mode 100644
index 0000000..46f9ed3
--- /dev/null
+++ b/utils/value.h
@@ -0,0 +1,34 @@
+//
+// Created by Mengwen Li (ml4643) on 3/7/2021.
+//
+
+#ifndef MAIN_VALUE_H
+#define MAIN_VALUE_H
+
+#include <string>
+
+using namespace std;
+
+class Value {
+   public:
+    enum class Type { STRING_VALUE, TOMBSTONE_VALUE };
+
+    // Ctor.
+    Value();
+    explicit Value(string value);
+    ~Value() = default;
+    // Copy ctor and move ctor.
+    Value(const Value& value) = default;
+    Value(Value&& value) = default;
+    // Copy assignment and move assignment.
+    Value& operator=(const Value& value) = default;
+    Value& operator=(Value&& value) = default;
+
+    [[nodiscard]] string value() const;
+
+   private:
+    Type m_type;
+    string m_value;
+};
+
+#endif  // MAIN_VALUE_H
